import{_ as s,c as n,o as l,ae as e}from"./chunks/framework.BezBLbNo.js";const u=JSON.parse('{"title":"项目结构","description":"","frontmatter":{},"headers":[],"relativePath":"guide/project-structure.md","filePath":"guide/project-structure.md"}'),p={name:"guide/project-structure.md"};function i(t,a,o,r,c,d){return l(),n("div",null,a[0]||(a[0]=[e(`<h1 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h1><p>以下是项目的核心目录结构及其职责说明：</p><div class="language-tree vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tree</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/</span></span>
<span class="line"><span>├── api/                # API 接口管理</span></span>
<span class="line"><span>│   ├── system/         # 系统相关接口</span></span>
<span class="line"><span>│   │   ├── user/       # 用户管理接口</span></span>
<span class="line"><span>│   │   ├── role/       # 角色管理接口</span></span>
<span class="line"><span>│   │   ├── menu/       # 菜单管理接口</span></span>
<span class="line"><span>│   │   └── permission/ # 权限管理接口</span></span>
<span class="line"><span>│   └── common/         # 通用接口</span></span>
<span class="line"><span>│       ├── upload.ts   # 文件上传接口</span></span>
<span class="line"><span>│       └── auth.ts     # 认证相关接口</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── components/         # 全局通用组件</span></span>
<span class="line"><span>│   ├── animate/        # 动画组件</span></span>
<span class="line"><span>│   │   ├── index.tsx   # 组件入口</span></span>
<span class="line"><span>│   │   ├── AnimateProvider.tsx # 动画提供者</span></span>
<span class="line"><span>│   │   └── types.ts    # 类型定义</span></span>
<span class="line"><span>│   ├── table/          # 增强表格组件</span></span>
<span class="line"><span>│   ├── upload/         # 文件上传组件</span></span>
<span class="line"><span>│   ├── toast/          # 消息提示组件</span></span>
<span class="line"><span>│   ├── icon/           # 图标组件</span></span>
<span class="line"><span>│   ├── loading/        # 加载组件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── configs/            # 应用配置</span></span>
<span class="line"><span>│   ├── theme/          # 主题配置</span></span>
<span class="line"><span>│   │   ├── hooks       # 主题hooks，用来生成全局css var和antd的theme tokens</span></span>
<span class="line"><span>│   │   ├── token       # antd theme token配置文件</span></span>
<span class="line"><span>│   └── configProvider.ts     # 应用全局设置,入口组件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── hooks/              # 自定义Hooks</span></span>
<span class="line"><span>│   ├── usePagination.ts # 分页管理Hook</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── layouts/            # 页面布局</span></span>
<span class="line"><span>│   ├── MainLayout/     # 主布局</span></span>
<span class="line"><span>│   │   ├── index.tsx</span></span>
<span class="line"><span>│   │   ├── Header.tsx</span></span>
<span class="line"><span>│   │   └── Sidebar.tsx</span></span>
<span class="line"><span>│   ├── VerticalSplit/  # 垂直分栏布局</span></span>
<span class="line"><span>│   │   ├── index.tsx</span></span>
<span class="line"><span>│   │   └── config.ts</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── pages/              # 页面组件</span></span>
<span class="line"><span>│   ├── Dashboard/      # 仪表盘页面</span></span>
<span class="line"><span>│   └── system/         # 系统管理</span></span>
<span class="line"><span>│       ├── user/       # 用户管理</span></span>
<span class="line"><span>│       ├── role/       # 角色管理</span></span>
<span class="line"><span>│       ├── menu/       # 菜单管理</span></span>
<span class="line"><span>│       └── permission/ # 权限管理</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── router/             # 路由配置</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── store/              # 状态管理</span></span>
<span class="line"><span>│   ├── systemStore.ts  # 系统相关状态</span></span>
<span class="line"><span>│   ├── userStore.ts    # 用户相关状态</span></span>
<span class="line"><span>│   ├── menuStore.ts    # 菜单状态</span></span>
<span class="line"><span>│   └── themeStore.ts   # 主题状态</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── styles/             # 全局样式</span></span>
<span class="line"><span>│   ├── reset.css       # 样式重置</span></span>
<span class="line"><span>│   ├── theme.css       # 主题样式</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└── utils/              # 工具函数</span></span>
<span class="line"><span>    ├── auth.ts         # 认证相关工具</span></span>
<span class="line"><span>    ├── http.ts         # 封装axios请求</span></span>
<span class="line"><span>    └── nprogress.ts    # 进度条工具</span></span></code></pre></div><h2 id="各模块说明" tabindex="-1">各模块说明 <a class="header-anchor" href="#各模块说明" aria-label="Permalink to &quot;各模块说明&quot;">​</a></h2><h3 id="layouts布局" tabindex="-1">layouts布局 <a class="header-anchor" href="#layouts布局" aria-label="Permalink to &quot;layouts布局&quot;">​</a></h3><p>布局系统提供了5种不同的布局方式，可以根据不同的应用场景选择合适的布局：</p><h4 id="_1-vertical-垂直菜单布局" tabindex="-1">1. Vertical (垂直菜单布局) <a class="header-anchor" href="#_1-vertical-垂直菜单布局" aria-label="Permalink to &quot;1. Vertical (垂直菜单布局)&quot;">​</a></h4><p>左侧为垂直菜单，右侧上方为header，下方为内容区域。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌────────┬───────────────────────────┐</span></span>
<span class="line"><span>│        │  Header                   │</span></span>
<span class="line"><span>│        ├───────────────────────────┤</span></span>
<span class="line"><span>│  Menu  │                           │</span></span>
<span class="line"><span>│        │                           │</span></span>
<span class="line"><span>│        │       Content Area        │</span></span>
<span class="line"><span>│        │                           │</span></span>
<span class="line"><span>│        │                           │</span></span>
<span class="line"><span>└────────┴───────────────────────────┘</span></span></code></pre></div><ul><li><strong>特点</strong>：导航结构清晰，适合层级较多的菜单</li><li><strong>适用场景</strong>：大型管理系统，复杂的功能层级</li><li><strong>关键配置</strong>：<code>layout: &#39;vertical&#39;</code></li></ul><h4 id="_2-horizontal-水平菜单布局" tabindex="-1">2. Horizontal (水平菜单布局) <a class="header-anchor" href="#_2-horizontal-水平菜单布局" aria-label="Permalink to &quot;2. Horizontal (水平菜单布局)&quot;">​</a></h4><p>顶部为header和水平菜单，下方为内容区域。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌────────────────────────────────────┐</span></span>
<span class="line"><span>│  Header with Menu                  │</span></span>
<span class="line"><span>├────────────────────────────────────┤</span></span>
<span class="line"><span>│                                    │</span></span>
<span class="line"><span>│                                    │</span></span>
<span class="line"><span>│            Content Area            │</span></span>
<span class="line"><span>│                                    │</span></span>
<span class="line"><span>│                                    │</span></span>
<span class="line"><span>└────────────────────────────────────┘</span></span></code></pre></div><ul><li><strong>特点</strong>：节省空间，适合菜单项较少的系统</li><li><strong>适用场景</strong>：功能较为简单的系统，或移动端适配</li><li><strong>关键配置</strong>：<code>layout: &#39;horizontal&#39;</code></li></ul><h4 id="_3-mini-迷你菜单布局" tabindex="-1">3. Mini (迷你菜单布局) <a class="header-anchor" href="#_3-mini-迷你菜单布局" aria-label="Permalink to &quot;3. Mini (迷你菜单布局)&quot;">​</a></h4><p>左侧为收缩的迷你菜单（只显示图标），右侧上方为header，下方为内容区域。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌──┬─────────────────────────────────┐</span></span>
<span class="line"><span>│  │  Header                         │</span></span>
<span class="line"><span>│  ├─────────────────────────────────┤</span></span>
<span class="line"><span>│M │                                 │</span></span>
<span class="line"><span>│e │                                 │</span></span>
<span class="line"><span>│n │         Content Area            │</span></span>
<span class="line"><span>│u │                                 │</span></span>
<span class="line"><span>│  │                                 │</span></span>
<span class="line"><span>└──┴─────────────────────────────────┘</span></span></code></pre></div><ul><li><strong>特点</strong>：最大化内容区域，同时保留菜单快速访问</li><li><strong>适用场景</strong>：需要更多内容展示空间的应用</li><li><strong>关键配置</strong>：<code>layout: &#39;mini&#39;</code></li></ul><h4 id="_4-verticalsplit-垂直分栏布局" tabindex="-1">4. VerticalSplit (垂直分栏布局) <a class="header-anchor" href="#_4-verticalsplit-垂直分栏布局" aria-label="Permalink to &quot;4. VerticalSplit (垂直分栏布局)&quot;">​</a></h4><p>左侧分为两栏：左边窄栏显示主菜单图标，右边宽栏显示子菜单列表，最右侧上方为header，下方为内容区域。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌──┬────────┬─────────────────────────┐</span></span>
<span class="line"><span>│  │        │  Header                 │</span></span>
<span class="line"><span>│主│        ├─────────────────────────┤</span></span>
<span class="line"><span>│菜│  子菜单 │                         │</span></span>
<span class="line"><span>│单│  列表   |                         │</span></span>
<span class="line"><span>│图│        │       Content Area      │</span></span>
<span class="line"><span>│标│        │                         │</span></span>
<span class="line"><span>│  │        │                         │</span></span>
<span class="line"><span>└──┴────────┴─────────────────────────┘</span></span></code></pre></div><ul><li><strong>特点</strong>：三栏布局，主菜单和子菜单分离，导航层次清晰</li><li><strong>适用场景</strong>：大型系统，需要清晰展示多级导航结构</li><li><strong>关键配置</strong>：<code>layout: &#39;vertical-split&#39;</code></li></ul><h4 id="_5-verticalsplitmini-垂直分栏迷你布局" tabindex="-1">5. VerticalSplitMini (垂直分栏迷你布局) <a class="header-anchor" href="#_5-verticalsplitmini-垂直分栏迷你布局" aria-label="Permalink to &quot;5. VerticalSplitMini (垂直分栏迷你布局)&quot;">​</a></h4><p>与垂直分栏布局类似，但中间的子菜单栏被压缩为仅显示图标状态，左边窄栏仍显示主菜单图标，最右侧上方为header，下方为内容区域。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>┌──┬──┬───────────────────────────────┐</span></span>
<span class="line"><span>│  │  │  Header                       │</span></span>
<span class="line"><span>│主│子├───────────────────────────────┤</span></span>
<span class="line"><span>│菜│菜│                               │</span></span>
<span class="line"><span>│单│单│                               │</span></span>
<span class="line"><span>│图│图│         Content Area          │</span></span>
<span class="line"><span>│标│标│                               │</span></span>
<span class="line"><span>│  │  │                               │</span></span>
<span class="line"><span>└──┴──┴───────────────────────────────┘</span></span></code></pre></div><ul><li><strong>特点</strong>：三栏布局的精简版，主菜单和子菜单都以图标形式显示，在保持完整导航结构的同时扩大内容区域</li><li><strong>适用场景</strong>：需要更多内容展示空间，但仍需快速访问所有导航层级的系统</li><li><strong>关键配置</strong>：<code>layout: &#39;vertical-split-mini&#39;</code></li></ul><p>每种布局都支持以下配置：</p><ul><li><strong>暗色主题</strong>：可设置菜单区域为暗色主题</li><li><strong>菜单折叠</strong>：支持垂直菜单的折叠与展开</li><li><strong>固定顶栏</strong>：支持顶部导航固定</li><li><strong>主题色定制</strong>：支持通过主题系统修改布局主色调</li></ul><h3 id="主题系统" tabindex="-1">主题系统 <a class="header-anchor" href="#主题系统" aria-label="Permalink to &quot;主题系统&quot;">​</a></h3><p>主题系统基于Ant Design的主题配置机制，同时扩展了更灵活的主题切换能力：</p><h4 id="主题配置" tabindex="-1">主题配置 <a class="header-anchor" href="#主题配置" aria-label="Permalink to &quot;主题配置&quot;">​</a></h4><p>主题配置通过<code>configs/theme</code>目录下的文件进行管理：</p><ul><li><p><strong>hooks</strong>：包含生成CSS变量和Ant Design主题Token的钩子函数</p><ul><li><code>useTheme</code>：处理主题状态和生成CSS变量</li><li><code>useThemeToken</code>：生成Ant Design组件库使用的主题Token</li></ul></li><li><p><strong>token</strong>：Ant Design主题Token配置</p><ul><li><code>light.ts</code>：浅色主题的配置</li><li><code>dark.ts</code>：深色主题的配置</li><li><code>base.ts</code>：基础主题配置</li></ul></li></ul><h4 id="主题特性" tabindex="-1">主题特性 <a class="header-anchor" href="#主题特性" aria-label="Permalink to &quot;主题特性&quot;">​</a></h4><ul><li><strong>多主题色支持</strong>：预设多种主题色，用户可一键切换</li><li><strong>明暗模式切换</strong>：支持系统级别的明暗模式自动切换</li><li><strong>组件级主题</strong>：可为特定组件设置独立的主题配置</li><li><strong>CSS变量实现</strong>：使用CSS变量实现无刷新主题切换</li><li><strong>主题状态持久化</strong>：用户的主题偏好会被保存在localStorage中</li></ul><h4 id="自定义主题" tabindex="-1">自定义主题 <a class="header-anchor" href="#自定义主题" aria-label="Permalink to &quot;自定义主题&quot;">​</a></h4><p>开发者可以通过以下步骤自定义主题：</p><ol><li>在<code>token</code>目录中创建新的主题配置文件</li><li>在<code>themeStore</code>中注册新主题</li><li>在主题选择器组件中添加新主题选项</li></ol><h3 id="rbac权限系统" tabindex="-1">RBAC权限系统 <a class="header-anchor" href="#rbac权限系统" aria-label="Permalink to &quot;RBAC权限系统&quot;">​</a></h3><p>本项目实现了完整的基于角色的访问控制(RBAC)系统，包含以下核心功能：</p><h4 id="权限模型" tabindex="-1">权限模型 <a class="header-anchor" href="#权限模型" aria-label="Permalink to &quot;权限模型&quot;">​</a></h4><ul><li><strong>用户(User)</strong>：系统的使用者，与角色关联</li><li><strong>角色(Role)</strong>：权限的集合，定义用户可以执行的操作</li><li><strong>权限(Permission)</strong>：系统中的原子操作单元</li><li><strong>菜单(Menu)</strong>：系统功能的导航入口，与权限关联</li></ul><h4 id="权限控制" tabindex="-1">权限控制 <a class="header-anchor" href="#权限控制" aria-label="Permalink to &quot;权限控制&quot;">​</a></h4><ul><li><strong>路由权限</strong>：基于用户角色控制页面访问权限</li><li><strong>操作权限</strong>：控制用户界面中按钮、链接等操作元素的显示</li><li><strong>数据权限</strong>：控制用户可以访问的数据范围</li></ul><h4 id="权限组件" tabindex="-1">权限组件 <a class="header-anchor" href="#权限组件" aria-label="Permalink to &quot;权限组件&quot;">​</a></h4><p>系统提供了多个权限控制组件：</p><ul><li><strong><code>&lt;AuthRoute /&gt;</code></strong>：权限路由组件，用于控制路由访问</li><li><strong><code>&lt;AuthButton /&gt;</code></strong>：权限按钮组件，根据权限控制按钮显示</li><li><strong><code>useHasPermission</code></strong>：权限判断Hook，用于条件渲染</li></ul><h4 id="权限管理界面" tabindex="-1">权限管理界面 <a class="header-anchor" href="#权限管理界面" aria-label="Permalink to &quot;权限管理界面&quot;">​</a></h4><ul><li><strong>角色管理</strong>：创建、编辑和删除角色</li><li><strong>权限分配</strong>：为角色分配菜单和操作权限</li><li><strong>用户角色管理</strong>：为用户分配角色</li></ul><h3 id="组件系统" tabindex="-1">组件系统 <a class="header-anchor" href="#组件系统" aria-label="Permalink to &quot;组件系统&quot;">​</a></h3><p>项目包含多个核心组件，用于提升开发效率和用户体验：</p><h4 id="基础组件" tabindex="-1">基础组件 <a class="header-anchor" href="#基础组件" aria-label="Permalink to &quot;基础组件&quot;">​</a></h4><ul><li><strong>Icon</strong>：基于<code>@iconify/react</code>的图标组件，支持多种图标库</li><li><strong>Button</strong>：扩展Ant Design的按钮组件，支持权限控制</li><li><strong>Form</strong>：封装常用表单控件和验证逻辑</li><li><strong>Table</strong>：增强表格组件，集成分页、排序和筛选功能</li></ul><h4 id="功能组件" tabindex="-1">功能组件 <a class="header-anchor" href="#功能组件" aria-label="Permalink to &quot;功能组件&quot;">​</a></h4><ul><li><strong>Upload</strong>：文件上传组件，支持图片预览和上传进度</li><li><strong>RichText</strong>：富文本编辑器，支持图片上传和格式控制</li><li><strong>Chart</strong>：数据可视化图表组件，基于ECharts</li><li><strong>Map</strong>：地图组件，支持位置选择和地理信息展示</li></ul><h4 id="动画组件" tabindex="-1">动画组件 <a class="header-anchor" href="#动画组件" aria-label="Permalink to &quot;动画组件&quot;">​</a></h4><ul><li><strong>AnimateProvider</strong>：动画上下文提供者，管理全局动画状态</li><li><strong>Transition</strong>：过渡动画组件，支持多种动画效果</li><li><strong>LoadingIcon</strong>：自定义加载动画，支持多种样式</li></ul><h4 id="布局组件" tabindex="-1">布局组件 <a class="header-anchor" href="#布局组件" aria-label="Permalink to &quot;布局组件&quot;">​</a></h4><ul><li><strong>PageContainer</strong>：页面容器组件，提供统一的页面布局</li><li><strong>Card</strong>：卡片组件，用于内容分组展示</li><li><strong>Drawer</strong>：抽屉组件，用于侧边栏表单和详情展示</li></ul><h3 id="api接口" tabindex="-1">API接口 <a class="header-anchor" href="#api接口" aria-label="Permalink to &quot;API接口&quot;">​</a></h3><p>API接口按照业务模块进行组织，主要包括：</p><h4 id="系统管理api" tabindex="-1">系统管理API <a class="header-anchor" href="#系统管理api" aria-label="Permalink to &quot;系统管理API&quot;">​</a></h4><ul><li><strong>用户管理</strong>：用户的CRUD操作，密码重置，状态管理</li><li><strong>角色管理</strong>：角色的CRUD操作，权限分配</li><li><strong>菜单管理</strong>：菜单的CRUD操作，排序和状态管理</li><li><strong>权限管理</strong>：权限的CRUD操作，与菜单关联</li></ul><h4 id="通用api" tabindex="-1">通用API <a class="header-anchor" href="#通用api" aria-label="Permalink to &quot;通用API&quot;">​</a></h4><ul><li><strong>上传</strong>：文件和图片上传</li><li><strong>认证</strong>：登录、注销、刷新令牌</li><li><strong>日志</strong>：系统日志查询</li></ul><h4 id="api封装" tabindex="-1">API封装 <a class="header-anchor" href="#api封装" aria-label="Permalink to &quot;API封装&quot;">​</a></h4><p>所有API请求通过<code>utils/http.ts</code>进行封装，提供了以下功能：</p><ul><li><strong>统一请求/响应拦截</strong>：处理认证Token、响应错误等</li><li><strong>请求重试</strong>：网络错误自动重试</li><li><strong>响应缓存</strong>：支持GET请求缓存</li><li><strong>取消请求</strong>：支持取消进行中的请求</li><li><strong>请求队列</strong>：防止重复请求</li></ul><h3 id="开发规范" tabindex="-1">开发规范 <a class="header-anchor" href="#开发规范" aria-label="Permalink to &quot;开发规范&quot;">​</a></h3><h4 id="组件命名" tabindex="-1">组件命名 <a class="header-anchor" href="#组件命名" aria-label="Permalink to &quot;组件命名&quot;">​</a></h4><ul><li>PascalCase命名（如<code>UserAvatar.tsx</code>）</li><li>目录与主组件同名（如<code>components/UserAvatar/index.tsx</code>）</li></ul><h4 id="文件结构" tabindex="-1">文件结构 <a class="header-anchor" href="#文件结构" aria-label="Permalink to &quot;文件结构&quot;">​</a></h4><div class="language-tree vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tree</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>components/</span></span>
<span class="line"><span>└── ComponentName/</span></span>
<span class="line"><span>    ├── index.tsx     # 组件出口</span></span>
<span class="line"><span>    ├── types.ts      # 类型定义</span></span>
<span class="line"><span>    ├── style.css     # 组件样式</span></span>
<span class="line"><span>    └── SubComponent/ # 子组件目录</span></span></code></pre></div><h4 id="代码分割" tabindex="-1">代码分割 <a class="header-anchor" href="#代码分割" aria-label="Permalink to &quot;代码分割&quot;">​</a></h4><ul><li>路由级代码分割使用<code>React.lazy</code></li><li>组件级分割使用动态导入<code>import()</code></li></ul><h4 id="提交规范" tabindex="-1">提交规范 <a class="header-anchor" href="#提交规范" aria-label="Permalink to &quot;提交规范&quot;">​</a></h4><ul><li>feat: 新功能</li><li>fix: bug修复</li><li>docs: 文档变更</li><li>refactor: 代码重构</li><li>chore: 构建/工具变更</li></ul>`,77)]))}const g=s(p,[["render",i]]);export{u as __pageData,g as default};
