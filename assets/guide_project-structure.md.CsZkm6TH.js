import{_ as n,c as a,o as p,ae as l}from"./chunks/framework.Cv2Q7lXT.js";const g=JSON.parse('{"title":"项目结构","description":"","frontmatter":{},"headers":[],"relativePath":"guide/project-structure.md","filePath":"guide/project-structure.md"}'),e={name:"guide/project-structure.md"};function i(t,s,c,o,r,d){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h1><p>以下是项目的核心目录结构及其职责说明：</p><div class="language-tree vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tree</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src/</span></span>
<span class="line"><span>├── api/                # API 接口管理</span></span>
<span class="line"><span>│   ├── system/         # 系统相关接口</span></span>
<span class="line"><span>│   │   ├── user.ts     # 用户管理接口</span></span>
<span class="line"><span>│   │   └── role.ts     # 角色管理接口</span></span>
<span class="line"><span>│   └── common/         # 通用接口</span></span>
<span class="line"><span>│       ├── upload.ts   # 文件上传接口</span></span>
<span class="line"><span>│       └── auth.ts     # 认证相关接口</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── components/         # 全局通用组件</span></span>
<span class="line"><span>│   ├── animate/        # 动画组件</span></span>
<span class="line"><span>│   │   ├── index.tsx   # 组件入口</span></span>
<span class="line"><span>│   │   └── types.ts    # 类型定义</span></span>
<span class="line"><span>│   ├── table/          # 增强表格组件</span></span>
<span class="line"><span>│   └── layout/         # 布局相关组件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── configs/            # 应用配置</span></span>
<span class="line"><span>│   ├── theme/          # 主题配置</span></span>
<span class="line"><span>│   │   ├── light.ts    # 浅色主题</span></span>
<span class="line"><span>│   │   └── dark.ts     # 深色主题</span></span>
<span class="line"><span>│   └── settings.ts     # 应用全局设置</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── hooks/              # 自定义Hooks</span></span>
<span class="line"><span>│   ├── usePermission.ts # 权限管理Hook</span></span>
<span class="line"><span>│   └── useTable.ts     # 表格操作Hook</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── layouts/            # 页面布局</span></span>
<span class="line"><span>│   ├── MainLayout/     # 主布局</span></span>
<span class="line"><span>│   │   ├── index.tsx</span></span>
<span class="line"><span>│   │   └── Header.tsx</span></span>
<span class="line"><span>│   └── AuthLayout/     # 认证相关布局</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── pages/              # 页面组件</span></span>
<span class="line"><span>│   ├── Dashboard/      # 仪表盘页面</span></span>
<span class="line"><span>│   ├── System/         # 系统管理</span></span>
<span class="line"><span>│   │   ├── UserManage/</span></span>
<span class="line"><span>│   │   └── RoleManage/</span></span>
<span class="line"><span>│   └── Exception/      # 异常页面（404等）</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── router/             # 路由配置</span></span>
<span class="line"><span>│   ├── index.tsx       # 路由定义</span></span>
<span class="line"><span>│   └── guard.tsx       # 路由守卫</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── store/              # 状态管理</span></span>
<span class="line"><span>│   ├── systemStore.ts  # 系统相关状态</span></span>
<span class="line"><span>│   └── userStore.ts    # 用户相关状态</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── styles/             # 全局样式</span></span>
<span class="line"><span>│   ├── reset.css       # 样式重置</span></span>
<span class="line"><span>│   └── variables.css   # CSS变量定义</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── types/              # 类型定义</span></span>
<span class="line"><span>│   ├── api/            # API响应类型</span></span>
<span class="line"><span>│   └── components/     # 组件Props类型</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└── utils/              # 工具函数</span></span>
<span class="line"><span>    ├── auth.ts         # 认证相关工具</span></span>
<span class="line"><span>    └── request.ts      # 封装axios请求</span></span></code></pre></div><h2 id="关键文件说明" tabindex="-1">关键文件说明 <a class="header-anchor" href="#关键文件说明" aria-label="Permalink to &quot;关键文件说明&quot;">​</a></h2><ol><li><p><strong>入口文件</strong> <code>src/main.tsx</code></p><ul><li>初始化React应用</li><li>挂载全局配置</li><li>注册错误边界</li></ul></li><li><p><strong>核心配置</strong> <code>src/configs/</code></p><ul><li><code>theme/</code>: 主题颜色、间距、字体等设计系统配置</li><li><code>settings.ts</code>: 功能开关、默认参数等全局设置</li></ul></li><li><p><strong>路由配置</strong> <code>src/router/</code></p><ul><li>路由懒加载配置</li><li>权限验证逻辑</li><li>页面过渡动画配置</li></ul></li><li><p><strong>状态管理</strong> <code>src/store/</code></p><ul><li>使用Zustand管理全局状态</li><li>持久化存储配置</li><li>业务状态拆分（用户、系统、UI状态等）</li></ul></li></ol><h2 id="开发规范" tabindex="-1">开发规范 <a class="header-anchor" href="#开发规范" aria-label="Permalink to &quot;开发规范&quot;">​</a></h2><ol><li><p><strong>组件命名</strong></p><ul><li>PascalCase命名（如<code>UserAvatar.tsx</code>）</li><li>目录与主组件同名（如<code>components/UserAvatar/index.tsx</code>）</li></ul></li><li><p><strong>文件结构</strong></p><div class="language-tree vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tree</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>components/</span></span>
<span class="line"><span>└── ComponentName/</span></span>
<span class="line"><span>    ├── index.tsx     # 组件出口</span></span>
<span class="line"><span>    ├── types.ts      # 类型定义</span></span>
<span class="line"><span>    ├── style.css     # 组件样式</span></span>
<span class="line"><span>    └── SubComponent/ # 子组件目录</span></span></code></pre></div></li><li><p><strong>代码分割</strong></p><ul><li>路由级代码分割使用<code>React.lazy</code></li><li>组件级分割使用动态导入<code>import()</code></li></ul></li><li><p><strong>提交规范</strong></p><ul><li>feat: 新功能</li><li>fix: bug修复</li><li>docs: 文档变更</li><li>refactor: 代码重构</li><li>chore: 构建/工具变更</li></ul></li></ol>`,7)]))}const h=n(e,[["render",i]]);export{g as __pageData,h as default};
